/* tslint:disable */
/* eslint-disable spellcheck/spell-checker */
/* Generated by ts-generator ver. 0.0.8 */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from '.';

interface Erc20ProxyContractInterface extends Interface {
  functions: {
    transferFromWithReference: TypedFunctionDescription<{
      encode([_tokenAddress, _to, _amount, _paymentReference]: [
        string,
        string,
        BigNumberish,
        Arrayish,
      ]): string;
    }>;
  };

  events: {
    TransferWithReference: TypedEventDescription<{
      encodeTopics([tokenAddress, to, amount, paymentReference]: [
        null,
        null,
        null,
        Arrayish | null,
      ]): string[];
    }>;
  };
}

export abstract class Erc20ProxyContract extends Contract {
  abstract connect(signerOrProvider: Signer | Provider | string): Erc20ProxyContract;
  abstract attach(addressOrName: string): Erc20ProxyContract;
  abstract deployed(): Promise<Erc20ProxyContract>;

  abstract on(event: EventFilter | string, listener: Listener): Erc20ProxyContract;
  abstract once(event: EventFilter | string, listener: Listener): Erc20ProxyContract;
  abstract addListener(eventName: EventFilter | string, listener: Listener): Erc20ProxyContract;
  abstract removeAllListeners(eventName: EventFilter | string): Erc20ProxyContract;
  abstract removeListener(eventName: any, listener: Listener): Erc20ProxyContract;

  abstract interface: Erc20ProxyContractInterface;

  abstract functions: {
    transferFromWithReference(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;
  };

  abstract transferFromWithReference(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    _paymentReference: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  abstract filters: {
    TransferWithReference(
      tokenAddress: null,
      to: null,
      amount: null,
      paymentReference: Arrayish | null,
    ): EventFilter;
  };

  abstract estimate: {
    transferFromWithReference(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: Arrayish,
    ): Promise<BigNumber>;
  };
}
