/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface DiamondChainlinkConversionFacetInterface extends ethers.utils.Interface {
  functions: {
    'getConversion(uint256,address[])': FunctionFragment;
    'getRate(address[])': FunctionFragment;
    'updateAggregator(address,address,address)': FunctionFragment;
    'updateAggregatorsList(address[],address[],address[])': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'getConversion', values: [BigNumberish, string[]]): string;
  encodeFunctionData(functionFragment: 'getRate', values: [string[]]): string;
  encodeFunctionData(
    functionFragment: 'updateAggregator',
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAggregatorsList',
    values: [string[], string[], string[]],
  ): string;

  decodeFunctionResult(functionFragment: 'getConversion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAggregator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAggregatorsList', data: BytesLike): Result;

  events: {
    'AggregatorUpdated(address,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AggregatorUpdated'): EventFragment;
}

export class DiamondChainlinkConversionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondChainlinkConversionFacetInterface;

  functions: {
    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getRate(
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  getConversion(
    _amountIn: BigNumberish,
    _path: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getRate(
    _path: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAggregator(
    _input: string,
    _output: string,
    _aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAggregatorsList(
    _inputs: string[],
    _outputs: string[],
    _aggregators: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        result: BigNumber;
        oldestRateTimestamp: BigNumber;
      }
    >;

    getRate(_path: string[], overrides?: CallOverrides): Promise<BigNumber>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    AggregatorUpdated(
      _input?: null,
      _output?: null,
      _aggregator?: null,
    ): TypedEventFilter<
      [string, string, string],
      { _input: string; _output: string; _aggregator: string }
    >;
  };

  estimateGas: {
    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getRate(
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConversion(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getRate(
      _path: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAggregator(
      _input: string,
      _output: string,
      _aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAggregatorsList(
      _inputs: string[],
      _outputs: string[],
      _aggregators: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
