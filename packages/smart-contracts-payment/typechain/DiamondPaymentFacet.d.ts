/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface DiamondPaymentFacetInterface extends ethers.utils.Interface {
  functions: {
    'exactNativeTransferWithFees(address,uint256,bytes,uint256,address)': FunctionFragment;
    'nativeTransfer(address,bytes)': FunctionFragment;
    'nativeTransferWithFees(address,bytes,uint256,address)': FunctionFragment;
    'tokenTransfer(address,address,uint256,bytes)': FunctionFragment;
    'tokenTransferWithFees(address,address,uint256,bytes,uint256,address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'exactNativeTransferWithFees',
    values: [string, BigNumberish, BytesLike, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'nativeTransfer', values: [string, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'nativeTransferWithFees',
    values: [string, BytesLike, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenTransfer',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenTransferWithFees',
    values: [string, string, BigNumberish, BytesLike, BigNumberish, string],
  ): string;

  decodeFunctionResult(functionFragment: 'exactNativeTransferWithFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nativeTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nativeTransferWithFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenTransferWithFees', data: BytesLike): Result;

  events: {
    'NativeTransfer(address,uint256,bytes)': EventFragment;
    'NativeTransferWithFees(address,uint256,bytes,uint256,address)': EventFragment;
    'TokenTransfer(address,address,uint256,bytes)': EventFragment;
    'TokenTransferWithFees(address,address,uint256,bytes,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NativeTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NativeTransferWithFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenTransferWithFees'): EventFragment;
}

export class DiamondPaymentFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondPaymentFacetInterface;

  functions: {
    exactNativeTransferWithFees(
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nativeTransfer(
      _to: string,
      _paymentReference: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nativeTransferWithFees(
      _to: string,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenTransfer(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenTransferWithFees(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  exactNativeTransferWithFees(
    _to: string,
    _amount: BigNumberish,
    _paymentReference: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nativeTransfer(
    _to: string,
    _paymentReference: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nativeTransferWithFees(
    _to: string,
    _paymentReference: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenTransfer(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    _paymentReference: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenTransferWithFees(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    _paymentReference: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    exactNativeTransferWithFees(
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    nativeTransfer(
      _to: string,
      _paymentReference: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    nativeTransferWithFees(
      _to: string,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    tokenTransfer(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    tokenTransferWithFees(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    NativeTransfer(
      to?: null,
      amount?: null,
      paymentReference?: BytesLike | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { to: string; amount: BigNumber; paymentReference: string }
    >;

    NativeTransferWithFees(
      to?: null,
      amount?: null,
      paymentReference?: BytesLike | null,
      feeAmount?: null,
      feeAddress?: null,
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        to: string;
        amount: BigNumber;
        paymentReference: string;
        feeAmount: BigNumber;
        feeAddress: string;
      }
    >;

    TokenTransfer(
      tokenAddress?: null,
      to?: null,
      amount?: null,
      paymentReference?: BytesLike | null,
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        tokenAddress: string;
        to: string;
        amount: BigNumber;
        paymentReference: string;
      }
    >;

    TokenTransferWithFees(
      tokenAddress?: null,
      to?: null,
      amount?: null,
      paymentReference?: BytesLike | null,
      feeAmount?: null,
      feeAddress?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, string],
      {
        tokenAddress: string;
        to: string;
        amount: BigNumber;
        paymentReference: string;
        feeAmount: BigNumber;
        feeAddress: string;
      }
    >;
  };

  estimateGas: {
    exactNativeTransferWithFees(
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nativeTransfer(
      _to: string,
      _paymentReference: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nativeTransferWithFees(
      _to: string,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenTransfer(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenTransferWithFees(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exactNativeTransferWithFees(
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nativeTransfer(
      _to: string,
      _paymentReference: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nativeTransferWithFees(
      _to: string,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenTransfer(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenTransferWithFees(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
