/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface DiamonPaymentSwapFacetInterface extends ethers.utils.Interface {
  functions: {
    'setSwapRouter(address)': FunctionFragment;
    'tokenTransferWithSwap(address,uint256,uint256,address[],bytes,uint256,address,uint256)': FunctionFragment;
    'tokenTransferWithSwapAndConversion(address,uint256,uint256,address[],address[],bytes,uint256,address,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'setSwapRouter', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'tokenTransferWithSwap',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenTransferWithSwapAndConversion',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      string[],
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'setSwapRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenTransferWithSwap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tokenTransferWithSwapAndConversion',
    data: BytesLike,
  ): Result;

  events: {};
}

export class DiamonPaymentSwapFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamonPaymentSwapFacetInterface;

  functions: {
    setSwapRouter(
      _newSwapRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenTransferWithSwap(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenTransferWithSwapAndConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _swapRouterPath: string[],
      _chainlinkPath: string[],
      _paymentReference: BytesLike,
      _requestFeeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      _chainlinkMaxRateTimespan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  setSwapRouter(
    _newSwapRouterAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenTransferWithSwap(
    _to: string,
    _requestAmount: BigNumberish,
    _amountInMax: BigNumberish,
    _path: string[],
    _paymentReference: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenTransferWithSwapAndConversion(
    _to: string,
    _requestAmount: BigNumberish,
    _amountInMax: BigNumberish,
    _swapRouterPath: string[],
    _chainlinkPath: string[],
    _paymentReference: BytesLike,
    _requestFeeAmount: BigNumberish,
    _feeAddress: string,
    _deadline: BigNumberish,
    _chainlinkMaxRateTimespan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    setSwapRouter(_newSwapRouterAddress: string, overrides?: CallOverrides): Promise<void>;

    tokenTransferWithSwap(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    tokenTransferWithSwapAndConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _swapRouterPath: string[],
      _chainlinkPath: string[],
      _paymentReference: BytesLike,
      _requestFeeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      _chainlinkMaxRateTimespan: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    setSwapRouter(
      _newSwapRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenTransferWithSwap(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenTransferWithSwapAndConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _swapRouterPath: string[],
      _chainlinkPath: string[],
      _paymentReference: BytesLike,
      _requestFeeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      _chainlinkMaxRateTimespan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setSwapRouter(
      _newSwapRouterAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenTransferWithSwap(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenTransferWithSwapAndConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _amountInMax: BigNumberish,
      _swapRouterPath: string[],
      _chainlinkPath: string[],
      _paymentReference: BytesLike,
      _requestFeeAmount: BigNumberish,
      _feeAddress: string,
      _deadline: BigNumberish,
      _chainlinkMaxRateTimespan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
