/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type {
  IDiamondPaymentConversion,
  IDiamondPaymentConversionInterface,
} from '../IDiamondPaymentConversion';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'currency',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'bytes',
        name: 'paymentReference',
        type: 'bytes',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'maxRateTimespan',
        type: 'uint256',
      },
    ],
    name: 'TransferWithConversion',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_requestAmount',
        type: 'uint256',
      },
      {
        internalType: 'address[]',
        name: '_path',
        type: 'address[]',
      },
      {
        internalType: 'bytes',
        name: '_paymentReference',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_feeAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_maxRateTimespan',
        type: 'uint256',
      },
    ],
    name: 'nativeTransferWithConversion',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_requestAmount',
        type: 'uint256',
      },
      {
        internalType: 'address[]',
        name: '_path',
        type: 'address[]',
      },
      {
        internalType: 'bytes',
        name: '_paymentReference',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_feeAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_maxToSpend',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_maxRateTimespan',
        type: 'uint256',
      },
    ],
    name: 'tokenTransferWithConversion',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class IDiamondPaymentConversion__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondPaymentConversionInterface {
    return new utils.Interface(_abi) as IDiamondPaymentConversionInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IDiamondPaymentConversion {
    return new Contract(address, _abi, signerOrProvider) as IDiamondPaymentConversion;
  }
}
