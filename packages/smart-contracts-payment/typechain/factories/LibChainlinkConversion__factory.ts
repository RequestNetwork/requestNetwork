/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  LibChainlinkConversion,
  LibChainlinkConversionInterface,
} from '../LibChainlinkConversion';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_input',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_output',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
    ],
    name: 'AggregatorUpdated',
    type: 'event',
  },
];

const _bytecode =
  '0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c031c36787d23675911b07fedd1292855467409a74137deca8790bb9b3261d1464736f6c63430008060033';

export class LibChainlinkConversion__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<LibChainlinkConversion> {
    return super.deploy(overrides || {}) as Promise<LibChainlinkConversion>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibChainlinkConversion {
    return super.attach(address) as LibChainlinkConversion;
  }
  connect(signer: Signer): LibChainlinkConversion__factory {
    return super.connect(signer) as LibChainlinkConversion__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibChainlinkConversionInterface {
    return new utils.Interface(_abi) as LibChainlinkConversionInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): LibChainlinkConversion {
    return new Contract(address, _abi, signerOrProvider) as LibChainlinkConversion;
  }
}
