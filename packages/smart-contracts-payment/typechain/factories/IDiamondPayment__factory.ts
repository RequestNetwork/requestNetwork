/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type { IDiamondPayment, IDiamondPaymentInterface } from '../IDiamondPayment';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'bytes',
        name: 'paymentReference',
        type: 'bytes',
      },
    ],
    name: 'NativeTransfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'bytes',
        name: 'paymentReference',
        type: 'bytes',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'feeAddress',
        type: 'address',
      },
    ],
    name: 'NativeTransferWithFees',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'tokenAddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'bytes',
        name: 'paymentReference',
        type: 'bytes',
      },
    ],
    name: 'TokenTransfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'tokenAddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'bytes',
        name: 'paymentReference',
        type: 'bytes',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'feeAddress',
        type: 'address',
      },
    ],
    name: 'TokenTransferWithFees',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_paymentReference',
        type: 'bytes',
      },
    ],
    name: 'nativeTransfer',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address payable',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_paymentReference',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        internalType: 'address payable',
        name: '_feeAddress',
        type: 'address',
      },
    ],
    name: 'nativeTransferWithFees',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_tokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_paymentReference',
        type: 'bytes',
      },
    ],
    name: 'tokenTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_tokenAddress',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_paymentReference',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: '_feeAmount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_feeAddress',
        type: 'address',
      },
    ],
    name: 'tokenTransferWithFees',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class IDiamondPayment__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondPaymentInterface {
    return new utils.Interface(_abi) as IDiamondPaymentInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IDiamondPayment {
    return new Contract(address, _abi, signerOrProvider) as IDiamondPayment;
  }
}
