/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type {
  IDiamondChainlinkConversion,
  IDiamondChainlinkConversionInterface,
} from '../IDiamondChainlinkConversion';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_input',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_output',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
    ],
    name: 'AggregatorUpdated',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amountIn',
        type: 'uint256',
      },
      {
        internalType: 'address[]',
        name: '_path',
        type: 'address[]',
      },
    ],
    name: 'getConversion',
    outputs: [
      {
        internalType: 'uint256',
        name: 'result',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'oldestRateTimestamp',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_path',
        type: 'address[]',
      },
    ],
    name: 'getRate',
    outputs: [
      {
        internalType: 'uint256',
        name: 'rate',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_input',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_output',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_aggregator',
        type: 'address',
      },
    ],
    name: 'updateAggregator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_inputs',
        type: 'address[]',
      },
      {
        internalType: 'address[]',
        name: '_outputs',
        type: 'address[]',
      },
      {
        internalType: 'address[]',
        name: '_aggregators',
        type: 'address[]',
      },
    ],
    name: 'updateAggregatorsList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class IDiamondChainlinkConversion__factory {
  static readonly abi = _abi;
  static createInterface(): IDiamondChainlinkConversionInterface {
    return new utils.Interface(_abi) as IDiamondChainlinkConversionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IDiamondChainlinkConversion {
    return new Contract(address, _abi, signerOrProvider) as IDiamondChainlinkConversion;
  }
}
