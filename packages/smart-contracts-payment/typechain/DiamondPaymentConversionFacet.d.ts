/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface DiamondPaymentConversionFacetInterface extends ethers.utils.Interface {
  functions: {
    'nativeTransferWithConversion(address,uint256,address[],bytes,uint256,address,uint256)': FunctionFragment;
    'tokenTransferWithConversion(address,uint256,address[],bytes,uint256,address,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'nativeTransferWithConversion',
    values: [string, BigNumberish, string[], BytesLike, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenTransferWithConversion',
    values: [
      string,
      BigNumberish,
      string[],
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'nativeTransferWithConversion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenTransferWithConversion', data: BytesLike): Result;

  events: {
    'TransferWithConversion(uint256,address,bytes,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'TransferWithConversion'): EventFragment;
}

export class DiamondPaymentConversionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondPaymentConversionFacetInterface;

  functions: {
    nativeTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxRateTimespan: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxToSpend: BigNumberish,
      _maxRateTimespan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  nativeTransferWithConversion(
    _to: string,
    _requestAmount: BigNumberish,
    _path: string[],
    _paymentReference: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    _maxRateTimespan: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenTransferWithConversion(
    _to: string,
    _requestAmount: BigNumberish,
    _path: string[],
    _paymentReference: BytesLike,
    _feeAmount: BigNumberish,
    _feeAddress: string,
    _maxToSpend: BigNumberish,
    _maxRateTimespan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    nativeTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxRateTimespan: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    tokenTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxToSpend: BigNumberish,
      _maxRateTimespan: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    TransferWithConversion(
      amount?: null,
      currency?: null,
      paymentReference?: BytesLike | null,
      feeAmount?: null,
      maxRateTimespan?: null,
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        amount: BigNumber;
        currency: string;
        paymentReference: string;
        feeAmount: BigNumber;
        maxRateTimespan: BigNumber;
      }
    >;
  };

  estimateGas: {
    nativeTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxRateTimespan: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxToSpend: BigNumberish,
      _maxRateTimespan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    nativeTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxRateTimespan: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenTransferWithConversion(
      _to: string,
      _requestAmount: BigNumberish,
      _path: string[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: string,
      _maxToSpend: BigNumberish,
      _maxRateTimespan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
