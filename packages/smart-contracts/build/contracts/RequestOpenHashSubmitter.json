{
  "contractName": "RequestOpenHashSubmitter",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRequestHashStorage",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_addressBurner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "burnerAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedBurnerContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rateFeesNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rateFeesDenominator",
          "type": "uint256"
        }
      ],
      "name": "UpdatedFeeParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinimumFeeThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdminRemoved",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contentSize",
          "type": "uint256"
        }
      ],
      "name": "getFeesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelistAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minimumFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rateFeesDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rateFeesNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceWhitelistAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "requestBurnerContract",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "requestHashStorage",
      "outputs": [
        {
          "internalType": "contract RequestHashStorage",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rateFeesNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rateFeesDenominator",
          "type": "uint256"
        }
      ],
      "name": "setFeeParameters",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_requestBurnerContract",
          "type": "address"
        }
      ],
      "name": "setRequestBurnerContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_feesParameters",
          "type": "bytes"
        }
      ],
      "name": "submitHash",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRequestHashStorage\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_addressBurner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnerAddress\",\"type\":\"address\"}],\"name\":\"UpdatedBurnerContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateFeesNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateFeesDenominator\",\"type\":\"uint256\"}],\"name\":\"UpdatedFeeParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinimumFeeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contentSize\",\"type\":\"uint256\"}],\"name\":\"getFeesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFeesDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFeesNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestBurnerContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestHashStorage\",\"outputs\":[{\"internalType\":\"contract RequestHashStorage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateFeesNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateFeesDenominator\",\"type\":\"uint256\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_requestBurnerContract\",\"type\":\"address\"}],\"name\":\"setRequestBurnerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_feesParameters\",\"type\":\"bytes\"}],\"name\":\"submitHash\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"_addressBurner\":\"Burner address\",\"_addressRequestHashStorage\":\"contract address which manages the hashes declarations\"}},\"getFeesAmount(uint256)\":{\"params\":{\"_contentSize\":\"Size of the content of the block to be stored\"},\"return\":\"the expected amount of fees in wei\"},\"setFeeParameters(uint256,uint256,uint256)\":{\"details\":\"if the _rateFeesDenominator is 0, it will be treated as 1. (in other words, the computation of the fees will not use it)\",\"params\":{\"_minimumFee\":\"minimum fixed fee\",\"_rateFeesDenominator\":\"denominator rate\",\"_rateFeesNumerator\":\"numerator rate\"}},\"setRequestBurnerContract(address)\":{\"params\":{\"_requestBurnerContract\":\"address of the contract that will burn req token (probably through Kyber)\"}},\"submitHash(string,bytes)\":{\"params\":{\"_feesParameters\":\"fees parameters used to compute the fees. Here, it is the content size in an uint256\",\"_hash\":\"Hash of the request to be stored\"}}},\"title\":\"RequestOpenHashSubmitter\"},\"userdoc\":{\"methods\":{\"getFeesAmount(uint256)\":{\"notice\":\"Computes the fees.\"},\"setFeeParameters(uint256,uint256,uint256)\":{\"notice\":\"Sets the fees rate and minimum fee.\"},\"setRequestBurnerContract(address)\":{\"notice\":\"Set the request burner address.\"},\"submitHash(string,bytes)\":{\"notice\":\"Submit a new hash to the blockchain.\"}},\"notice\":\"Contract declares data hashes and collects the fees.The hash is declared to the whole request network system through the RequestHashStorage contract.Anyone can submit hashes.\"}},\"settings\":{\"compilationTarget\":{\"/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestOpenHashSubmitter.sol\":\"RequestOpenHashSubmitter\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/Bytes.sol\":{\"keccak256\":\"0x464b989de612e364d4bf9eefc909741fcf377d48dcba65e37041c6f89a69ee0c\",\"urls\":[\"bzz-raw://2d83f156e05c9bb6985485c6eac9a93cbc0c6d630b4960f7f7362b163acd6991\",\"dweb:/ipfs/QmYUFasqsmpU7anqgqbwxv7LBR5r7jUJ5FLVm8DPvn9MuB\"]},\"/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestHashStorage.sol\":{\"keccak256\":\"0x8a23beae79b1dc339943b0a4c279bd76cfc4e13ddd3be8be869dd6d11ef37f18\",\"urls\":[\"bzz-raw://2ee20fee7283bc9883362909842a9267bbda459bd3be29600bfff3caffb4e4b2\",\"dweb:/ipfs/Qmcpc3wuEjWdEvFPAN6CWgGm2HjS9hdJLyharp4QuUWJAs\"]},\"/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestOpenHashSubmitter.sol\":{\"keccak256\":\"0xd8ea301d3b12a758a40907764456321d1e3d0116abe5819f57c093827d24dba5\",\"urls\":[\"bzz-raw://2b4e9771a669f805278d9b8fe4dcac559ec2f5b6ba041f460bafb649264b746d\",\"dweb:/ipfs/QmS4NR7AgwdVae94ZnzrZWo9Lic4fAsNcwrXd2UFv9Zwe2\"]},\"/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/StorageFeeCollector.sol\":{\"keccak256\":\"0x0f20da91a812b6d628d988ecde15c06004961db61f5261b4f2bdbf8ccbdd5381\",\"urls\":[\"bzz-raw://ff03e11b9cdf4144137570f2e67257b5442c5e3e1dd6284949b5f1cca833f16c\",\"dweb:/ipfs/QmcfomYGrWVwVvRbfhM7SrX27zwT6TGCpWmMCy9hX8uKcg\"]},\"openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0x659ba0f9a3392cd50a8a5fafaf5dfd8c6a0878f6a4613bceff4e90dceddcd865\",\"urls\":[\"bzz-raw://4ca6617349a9b36fd82e9442a8e445ce9021a174e4399d1457ddc894ee3f5df3\",\"dweb:/ipfs/QmcmyB4cNazZ1sw963Afaijt67M9bDgwmGXCgQajGTD4tm\"]},\"openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\":{\"keccak256\":\"0x296248d0db94ffd742e1918944172d8c6f0eda2395330f7e33c058884620efdc\",\"urls\":[\"bzz-raw://bbedb198a9c62231d4d544c62ce1fe10b6df9ade250bb99e69dfd6bb000784bb\",\"dweb:/ipfs/QmcmHNuJBMbmFZSLfcX8g3rwUsntpPkJgihuGFrjBuapQN\"]},\"openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\":{\"keccak256\":\"0xfd5715327c3f75b7056fdf2e9dbb9b22559549af0381cc85859c9dcd8f101000\",\"urls\":[\"bzz-raw://d181d8bf50be0de500326314ccbff56373908eee5041e709fff3d37505418275\",\"dweb:/ipfs/QmXLXQtAtYAiKihMngJPN7TFHJJDhiBL9AHuoUuVdtrgNF\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzz-raw://1eb493553b27efd46c231a836a83ce50d215639feb97b4aac9f301d0fd034ff5\",\"dweb:/ipfs/QmbMdvSXcqGKxeeYvzF3VrWpoHQyVzMXBhzhAokF2Gdymv\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610fd4380380610fd48339818101604052604081101561003357600080fd5b8101908080519060200190929190805190602001909291905050508061005e336100e860201b60201c565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061028a565b61010081600061014660201b610c0e1790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129960405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561018057600080fd5b61019082826101f860201b60201c565b1561019a57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561023357600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d3b806102996000396000f3fe6080604052600436106100a75760003560e01c806375c268f31161006457806375c268f3146102f25780638f5b87e11461031d578063bb5f747b1461036c578063cb2537cb146103d5578063e40e845714610424578063f76f22561461047b576100a7565b80631a7626e714610115578063263f6a42146101405780634c5a628c1461016b57806351a58abb14610182578063524eb29c146102505780637362d9c8146102a1575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f742070617961626c652066616c6c6261636b00000000000000000000000081525060200191505060405180910390fd5b34801561012157600080fd5b5061012a6104d2565b6040518082815260200191505060405180910390f35b34801561014c57600080fd5b506101556104d8565b6040518082815260200191505060405180910390f35b34801561017757600080fd5b506101806104de565b005b61024e6004803603604081101561019857600080fd5b81019080803590602001906401000000008111156101b557600080fd5b8201836020820111156101c757600080fd5b803590602001918460018302840111640100000000831117156101e957600080fd5b90919293919293908035906020019064010000000081111561020a57600080fd5b82018360208201111561021c57600080fd5b8035906020019184600183028401116401000000008311171561023e57600080fd5b90919293919293905050506104e9565b005b34801561025c57600080fd5b5061029f6004803603602081101561027357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061069c565b005b3480156102ad57600080fd5b506102f0600480360360208110156102c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610777565b005b3480156102fe57600080fd5b50610307610795565b6040518082815260200191505060405180910390f35b34801561032957600080fd5b506103566004803603602081101561034057600080fd5b810190808035906020019092919050505061079b565b6040518082815260200191505060405180910390f35b34801561037857600080fd5b506103bb6004803603602081101561038f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f5565b604051808215151515815260200191505060405180910390f35b3480156103e157600080fd5b50610422600480360360608110156103f857600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610812565b005b34801561043057600080fd5b5061043961088b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048757600080fd5b506104906108b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60015481565b60025481565b6104e7336108d7565b565b600061053a83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000610931565b60001c9050346105498261079b565b1461059f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610cbb6021913960400191505060405180910390fd5b6105a8346109ab565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe8cc962868686866040518563ffffffff1660e01b81526004018080602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561067d57600080fd5b505af1158015610691573d6000803e3d6000fd5b505050505050505050565b6106a5336107f5565b6106ae57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb2c87fdcc342ca09b09df1fb16a153b7ceb0a4b56ad223f12c8fbff63f98ccd8600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b610780336107f5565b61078957600080fd5b61079281610a17565b50565b60035481565b6000806107b360025484610a7190919063ffffffff16565b90506000600354146107d7576107d460035482610aab90919063ffffffff16565b90505b60015481116107eb576001549150506107f0565b809150505b919050565b600061080b826000610ad190919063ffffffff16565b9050919050565b61081b336107f5565b61082457600080fd5b8260018190555081600281905550806003819055507f741cafcfc8058975fab7ed6bdaf402b47dca8aa9826990c454c058a6f9b06d1660015460025460035460405180848152602001838152602001828152602001935050505060405180910390a1505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108eb816000610b6390919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16560405160405180910390a250565b6000808210158015610947575082516020830111155b61099c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610cdc602b913960400191505060405180910390fd5b81602001830151905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a13573d6000803e3d6000fd5b5050565b610a2b816000610c0e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129960405160405180910390a250565b600080831415610a845760009050610aa5565b6000828402905082848281610a9557fe5b0414610aa057600080fd5b809150505b92915050565b6000808211610ab957600080fd5b6000828481610ac457fe5b0490508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b0c57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b9d57600080fd5b610ba78282610ad1565b610bb057600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c4857600080fd5b610c528282610ad1565b15610c5c57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe6d73672e76616c756520646f6573206e6f74206d617463682074686520666565736f66667365742076616c75652073686f756c6420626520696e2074686520636f72726563742072616e6765a265627a7a723158209956cea55d63aa28ca88400ec1a7d339198cdeac58105e03939f7d83f954203664736f6c634300050c0032",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806375c268f31161006457806375c268f3146102f25780638f5b87e11461031d578063bb5f747b1461036c578063cb2537cb146103d5578063e40e845714610424578063f76f22561461047b576100a7565b80631a7626e714610115578063263f6a42146101405780634c5a628c1461016b57806351a58abb14610182578063524eb29c146102505780637362d9c8146102a1575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f742070617961626c652066616c6c6261636b00000000000000000000000081525060200191505060405180910390fd5b34801561012157600080fd5b5061012a6104d2565b6040518082815260200191505060405180910390f35b34801561014c57600080fd5b506101556104d8565b6040518082815260200191505060405180910390f35b34801561017757600080fd5b506101806104de565b005b61024e6004803603604081101561019857600080fd5b81019080803590602001906401000000008111156101b557600080fd5b8201836020820111156101c757600080fd5b803590602001918460018302840111640100000000831117156101e957600080fd5b90919293919293908035906020019064010000000081111561020a57600080fd5b82018360208201111561021c57600080fd5b8035906020019184600183028401116401000000008311171561023e57600080fd5b90919293919293905050506104e9565b005b34801561025c57600080fd5b5061029f6004803603602081101561027357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061069c565b005b3480156102ad57600080fd5b506102f0600480360360208110156102c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610777565b005b3480156102fe57600080fd5b50610307610795565b6040518082815260200191505060405180910390f35b34801561032957600080fd5b506103566004803603602081101561034057600080fd5b810190808035906020019092919050505061079b565b6040518082815260200191505060405180910390f35b34801561037857600080fd5b506103bb6004803603602081101561038f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f5565b604051808215151515815260200191505060405180910390f35b3480156103e157600080fd5b50610422600480360360608110156103f857600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610812565b005b34801561043057600080fd5b5061043961088b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048757600080fd5b506104906108b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60015481565b60025481565b6104e7336108d7565b565b600061053a83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000610931565b60001c9050346105498261079b565b1461059f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610cbb6021913960400191505060405180910390fd5b6105a8346109ab565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe8cc962868686866040518563ffffffff1660e01b81526004018080602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561067d57600080fd5b505af1158015610691573d6000803e3d6000fd5b505050505050505050565b6106a5336107f5565b6106ae57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb2c87fdcc342ca09b09df1fb16a153b7ceb0a4b56ad223f12c8fbff63f98ccd8600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b610780336107f5565b61078957600080fd5b61079281610a17565b50565b60035481565b6000806107b360025484610a7190919063ffffffff16565b90506000600354146107d7576107d460035482610aab90919063ffffffff16565b90505b60015481116107eb576001549150506107f0565b809150505b919050565b600061080b826000610ad190919063ffffffff16565b9050919050565b61081b336107f5565b61082457600080fd5b8260018190555081600281905550806003819055507f741cafcfc8058975fab7ed6bdaf402b47dca8aa9826990c454c058a6f9b06d1660015460025460035460405180848152602001838152602001828152602001935050505060405180910390a1505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108eb816000610b6390919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16560405160405180910390a250565b6000808210158015610947575082516020830111155b61099c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610cdc602b913960400191505060405180910390fd5b81602001830151905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a13573d6000803e3d6000fd5b5050565b610a2b816000610c0e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129960405160405180910390a250565b600080831415610a845760009050610aa5565b6000828402905082848281610a9557fe5b0414610aa057600080fd5b809150505b92915050565b6000808211610ab957600080fd5b6000828481610ac457fe5b0490508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b0c57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b9d57600080fd5b610ba78282610ad1565b610bb057600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c4857600080fd5b610c528282610ad1565b15610c5c57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe6d73672e76616c756520646f6573206e6f74206d617463682074686520666565736f66667365742076616c75652073686f756c6420626520696e2074686520636f72726563742072616e6765a265627a7a723158209956cea55d63aa28ca88400ec1a7d339198cdeac58105e03939f7d83f954203664736f6c634300050c0032",
  "sourceMap": "373:1424:3:-;;;634:211;8:9:-1;5:2;;;30:1;27;20:12;5:2;634:211:3;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;634:211:3;;;;;;;;;;;;;;;;;;;;;;;;;738:14;433:30:13;452:10;433:18;;;:30;;:::i;:::-;1793:22:4;1769:21;;:46;;;;;;;;;;;;;;;;;;1698:122;813:26:3;773:18;;:67;;;;;;;;;;;;;;;;;;634:211;;373:1424;;923:143:13;987:29;1008:7;987:16;:20;;;;;;:29;;;;:::i;:::-;1051:7;1031:28;;;;;;;;;;;;923:143;:::o;259:181:12:-;354:1;335:21;;:7;:21;;;;327:30;;;;;;376:18;380:4;386:7;376:3;;;:18;;:::i;:::-;375:19;367:28;;;;;;429:4;406;:11;;:20;418:7;406:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;259:181;;:::o;786:162::-;858:4;901:1;882:21;;:7;:21;;;;874:30;;;;;;921:4;:11;;:20;933:7;921:20;;;;;;;;;;;;;;;;;;;;;;;;;914:27;;786:162;;;;:::o;373:1424:3:-;;;;;;;",
  "deployedSourceMap": "373:1424:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;944:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1045:25:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1045:25:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1074:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1074:32:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;826:91:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;826:91:13;;;:::i;:::-;;1214:581:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1214:581:3;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1214:581:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1214:581:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1214:581:3;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1214:581:3;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1214:581:3;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1214:581:3;;;;;;;;;;;;:::i;:::-;;2686:224:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2686:224:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2686:224:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;706:114:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;706:114:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;706:114:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;1110:34:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1110:34:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3081:404;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3081:404:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3081:404:4;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;577:123:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;577:123:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;577:123:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2160:353:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2160:353:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2160:353:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1203:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1203:44:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;435::3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;435:44:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1045:25:4;;;;:::o;1074:32::-;;;;:::o;826:91:13:-;877:33;899:10;877:21;:33::i;:::-;826:91::o;1214:581:3:-;1378:19;1408:40;1429:15;;1408:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1408:40:3;;;;;;1446:1;1408:20;:40::i;:::-;1400:49;;1378:71;;1521:9;1491:26;1505:11;1491:13;:26::i;:::-;:39;1483:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1621:31;1642:9;1621:20;:31::i;:::-;1733:18;;;;;;;;;;;:33;;;1767:5;;1774:15;;1733:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1733:57:3;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1733:57:3;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1733:57:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1733:57:3;;;;1214:581;;;;;:::o;2686:224:4:-;524:28:13;541:10;524:16;:28::i;:::-;516:37;;;;;;2828:22:4;2804:21;;:46;;;;;;;;;;;;;;;;;;2861:44;2883:21;;;;;;;;;;;2861:44;;;;;;;;;;;;;;;;;;;;;;2686:224;:::o;706:114:13:-;524:28;541:10;524:16;:28::i;:::-;516:37;;;;;;786:27;805:7;786:18;:27::i;:::-;706:114;:::o;1110:34:4:-;;;;:::o;3081:404::-;3158:7;3199:22;3224:35;3241:17;;3224:12;:16;;:35;;;;:::i;:::-;3199:60;;3293:1;3270:19;;:24;3266:101;;3321:39;3340:19;;3321:14;:18;;:39;;;;:::i;:::-;3304:56;;3266:101;3395:10;;3377:14;:28;3373:108;;3422:10;;3415:17;;;;;3373:108;3460:14;3453:21;;;3081:404;;;;:::o;577:123:13:-;641:4;664:29;685:7;664:16;:20;;:29;;;;:::i;:::-;657:36;;577:123;;;:::o;2160:353:4:-;524:28:13;541:10;524:16;:28::i;:::-;516:37;;;;;;2322:11:4;2309:10;:24;;;;2359:18;2339:17;:38;;;;2405:20;2383:19;:42;;;;2436:72;2457:10;;2469:17;;2488:19;;2436:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2160:353;;;:::o;1203:44::-;;;;;;;;;;;;;:::o;435::3:-;;;;;;;;;;;;;:::o;1072:151:13:-;1139:32;1163:7;1139:16;:23;;:32;;;;:::i;:::-;1208:7;1186:30;;;;;;;;;;;;1072:151;:::o;364:343:0:-;455:10;493:1;483:6;:11;;:41;;;;;513:4;:11;507:2;498:6;:11;:26;;483:41;475:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;688:6;684:2;680:15;674:4;670:26;664:33;658:39;;648:55;;;;:::o;3618:147:4:-;3721:21;;;;;;;;;;;:30;;:39;3752:7;3721:39;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3721:39:4;3618:147;:::o;923:143:13:-;987:29;1008:7;987:16;:20;;:29;;;;:::i;:::-;1051:7;1031:28;;;;;;;;;;;;923:143;:::o;229:421:15:-;287:7;532:1;527;:6;523:45;;;556:1;549:8;;;;523:45;578:9;594:1;590;:5;578:17;;622:1;617;613;:5;;;;;;:10;605:19;;;;;;642:1;635:8;;;229:421;;;;;:::o;778:296::-;836:7;933:1;929;:5;921:14;;;;;;945:9;961:1;957;:5;;;;;;945:17;;1066:1;1059:8;;;778:296;;;;:::o;786:162:12:-;858:4;901:1;882:21;;:7;:21;;;;874:30;;;;;;921:4;:11;;:20;933:7;921:20;;;;;;;;;;;;;;;;;;;;;;;;;914:27;;786:162;;;;:::o;514:184::-;612:1;593:21;;:7;:21;;;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;686:5;663:4;:11;;:20;675:7;663:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;514:184;;:::o;259:181::-;354:1;335:21;;:7;:21;;;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;429:4;406;:11;;:20;418:7;406:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;259:181;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./StorageFeeCollector.sol\";\nimport \"./RequestHashStorage.sol\";\nimport \"./Bytes.sol\";\n\n\n/**\n * @title RequestOpenHashSubmitter\n * @notice Contract declares data hashes and collects the fees.\n * @notice The hash is declared to the whole request network system through the RequestHashStorage contract.\n * @notice Anyone can submit hashes.\n */\ncontract RequestOpenHashSubmitter is StorageFeeCollector {\n\n  RequestHashStorage public requestHashStorage;\n  \n  /**\n   * @param _addressRequestHashStorage contract address which manages the hashes declarations\n   * @param _addressBurner Burner address\n   */\n  constructor(address _addressRequestHashStorage, address payable _addressBurner)\n    StorageFeeCollector(_addressBurner)\n    public\n  {\n    requestHashStorage = RequestHashStorage(_addressRequestHashStorage);\n  }\n\n  // Fallback function returns funds to the sender\n  function()\n    external\n    payable\n  {\n    revert(\"not payable fallback\");\n  }\n\n  /**\n   * @notice Submit a new hash to the blockchain.\n   *\n   * @param _hash Hash of the request to be stored\n   * @param _feesParameters fees parameters used to compute the fees. Here, it is the content size in an uint256\n   */\n  function submitHash(string calldata _hash, bytes calldata _feesParameters)\n    external\n    payable\n  {\n    // extract the contentSize from the _feesParameters\n    uint256 contentSize = uint256(Bytes.extractBytes32(_feesParameters, 0));\n\n    // Check fees are paid\n    require(getFeesAmount(contentSize) == msg.value, \"msg.value does not match the fees\");\n\n    // Send fees to burner, throws on failure\n    collectForREQBurning(msg.value);\n\n    // declare the hash to the whole system through to RequestHashStorage\n    requestHashStorage.declareNewHash(_hash, _feesParameters);\n  }\n}\n",
  "sourcePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestOpenHashSubmitter.sol",
  "ast": {
    "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestOpenHashSubmitter.sol",
    "exportedSymbols": {
      "RequestOpenHashSubmitter": [
        198
      ]
    },
    "id": 199,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 125,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:3"
      },
      {
        "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/StorageFeeCollector.sol",
        "file": "./StorageFeeCollector.sol",
        "id": 126,
        "nodeType": "ImportDirective",
        "scope": 199,
        "sourceUnit": 338,
        "src": "25:35:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestHashStorage.sol",
        "file": "./RequestHashStorage.sol",
        "id": 127,
        "nodeType": "ImportDirective",
        "scope": 199,
        "sourceUnit": 124,
        "src": "61:34:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/Bytes.sol",
        "file": "./Bytes.sol",
        "id": 128,
        "nodeType": "ImportDirective",
        "scope": 199,
        "sourceUnit": 28,
        "src": "96:21:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 129,
              "name": "StorageFeeCollector",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 337,
              "src": "410:19:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StorageFeeCollector_$337",
                "typeString": "contract StorageFeeCollector"
              }
            },
            "id": 130,
            "nodeType": "InheritanceSpecifier",
            "src": "410:19:3"
          }
        ],
        "contractDependencies": [
          337,
          1333
        ],
        "contractKind": "contract",
        "documentation": "@title RequestOpenHashSubmitter\n@notice Contract declares data hashes and collects the fees.\n@notice The hash is declared to the whole request network system through the RequestHashStorage contract.\n@notice Anyone can submit hashes.",
        "fullyImplemented": true,
        "id": 198,
        "linearizedBaseContracts": [
          198,
          337,
          1333
        ],
        "name": "RequestOpenHashSubmitter",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 132,
            "name": "requestHashStorage",
            "nodeType": "VariableDeclaration",
            "scope": 198,
            "src": "435:44:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_RequestHashStorage_$123",
              "typeString": "contract RequestHashStorage"
            },
            "typeName": {
              "contractScope": null,
              "id": 131,
              "name": "RequestHashStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 123,
              "src": "435:18:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                "typeString": "contract RequestHashStorage"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 148,
              "nodeType": "Block",
              "src": "767:78:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 142,
                      "name": "requestHashStorage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "773:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                        "typeString": "contract RequestHashStorage"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 144,
                          "name": "_addressRequestHashStorage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 134,
                          "src": "813:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 143,
                        "name": "RequestHashStorage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 123,
                        "src": "794:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_RequestHashStorage_$123_$",
                          "typeString": "type(contract RequestHashStorage)"
                        }
                      },
                      "id": 145,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "794:46:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                        "typeString": "contract RequestHashStorage"
                      }
                    },
                    "src": "773:67:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                      "typeString": "contract RequestHashStorage"
                    }
                  },
                  "id": 147,
                  "nodeType": "ExpressionStatement",
                  "src": "773:67:3"
                }
              ]
            },
            "documentation": "@param _addressRequestHashStorage contract address which manages the hashes declarations\n@param _addressBurner Burner address",
            "id": 149,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 139,
                    "name": "_addressBurner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 136,
                    "src": "738:14:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  }
                ],
                "id": 140,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 138,
                  "name": "StorageFeeCollector",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 337,
                  "src": "718:19:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_StorageFeeCollector_$337_$",
                    "typeString": "type(contract StorageFeeCollector)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "718:35:3"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134,
                  "name": "_addressRequestHashStorage",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "646:34:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 133,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "646:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 136,
                  "name": "_addressBurner",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "682:30:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 135,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "682:15:3",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "645:68:3"
            },
            "returnParameters": {
              "id": 141,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "767:0:3"
            },
            "scope": 198,
            "src": "634:211:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 156,
              "nodeType": "Block",
              "src": "938:41:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "6e6f742070617961626c652066616c6c6261636b",
                        "id": 153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "951:22:3",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_68d8ba3a651ec8e4ab98281ac8bd715a8adac0c57723f295f2da0444f5adb7f8",
                          "typeString": "literal_string \"not payable fallback\""
                        },
                        "value": "not payable fallback"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_68d8ba3a651ec8e4ab98281ac8bd715a8adac0c57723f295f2da0444f5adb7f8",
                          "typeString": "literal_string \"not payable fallback\""
                        }
                      ],
                      "id": 152,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1590,
                        1591
                      ],
                      "referencedDeclaration": 1591,
                      "src": "944:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "944:30:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 155,
                  "nodeType": "ExpressionStatement",
                  "src": "944:30:3"
                }
              ]
            },
            "documentation": null,
            "id": 157,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "908:2:3"
            },
            "returnParameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "938:0:3"
            },
            "scope": 198,
            "src": "900:79:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 196,
              "nodeType": "Block",
              "src": "1316:479:3",
              "statements": [
                {
                  "assignments": [
                    165
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 165,
                      "name": "contentSize",
                      "nodeType": "VariableDeclaration",
                      "scope": 196,
                      "src": "1378:19:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 164,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1378:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 173,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 169,
                            "name": "_feesParameters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 161,
                            "src": "1429:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 170,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1446:1:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 167,
                            "name": "Bytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "1408:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Bytes_$27_$",
                              "typeString": "type(library Bytes)"
                            }
                          },
                          "id": 168,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "extractBytes32",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 26,
                          "src": "1408:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory,uint256) pure returns (bytes32)"
                          }
                        },
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1408:40:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 166,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1400:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": "uint256"
                    },
                    "id": 172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1400:49:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1378:71:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 180,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 176,
                              "name": "contentSize",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "1505:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 175,
                            "name": "getFeesAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "1491:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view returns (uint256)"
                            }
                          },
                          "id": 177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1491:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 178,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1585,
                            "src": "1521:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 179,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1521:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1491:39:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "6d73672e76616c756520646f6573206e6f74206d61746368207468652066656573",
                        "id": 181,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1532:35:3",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_54a007a8536433c62f38304c137a8c36e4499f91e10eb2f37d21f4b195ebfc36",
                          "typeString": "literal_string \"msg.value does not match the fees\""
                        },
                        "value": "msg.value does not match the fees"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_54a007a8536433c62f38304c137a8c36e4499f91e10eb2f37d21f4b195ebfc36",
                          "typeString": "literal_string \"msg.value does not match the fees\""
                        }
                      ],
                      "id": 174,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1588,
                        1589
                      ],
                      "referencedDeclaration": 1589,
                      "src": "1483:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 182,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1483:85:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 183,
                  "nodeType": "ExpressionStatement",
                  "src": "1483:85:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 185,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1585,
                          "src": "1642:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 186,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1642:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 184,
                      "name": "collectForREQBurning",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 336,
                      "src": "1621:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1621:31:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 188,
                  "nodeType": "ExpressionStatement",
                  "src": "1621:31:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 192,
                        "name": "_hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 159,
                        "src": "1767:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 193,
                        "name": "_feesParameters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 161,
                        "src": "1774:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 189,
                        "name": "requestHashStorage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 132,
                        "src": "1733:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                          "typeString": "contract RequestHashStorage"
                        }
                      },
                      "id": 191,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "declareNewHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 122,
                      "src": "1733:33:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,bytes memory) external"
                      }
                    },
                    "id": 194,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1733:57:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 195,
                  "nodeType": "ExpressionStatement",
                  "src": "1733:57:3"
                }
              ]
            },
            "documentation": "@notice Submit a new hash to the blockchain.\n   * @param _hash Hash of the request to be stored\n@param _feesParameters fees parameters used to compute the fees. Here, it is the content size in an uint256",
            "id": 197,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "submitHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 159,
                  "name": "_hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 197,
                  "src": "1234:21:3",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 158,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1234:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 161,
                  "name": "_feesParameters",
                  "nodeType": "VariableDeclaration",
                  "scope": 197,
                  "src": "1257:30:3",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1257:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1233:55:3"
            },
            "returnParameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1316:0:3"
            },
            "scope": 198,
            "src": "1214:581:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 199,
        "src": "373:1424:3"
      }
    ],
    "src": "0:1798:3"
  },
  "legacyAST": {
    "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestOpenHashSubmitter.sol",
    "exportedSymbols": {
      "RequestOpenHashSubmitter": [
        198
      ]
    },
    "id": 199,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 125,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:3"
      },
      {
        "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/StorageFeeCollector.sol",
        "file": "./StorageFeeCollector.sol",
        "id": 126,
        "nodeType": "ImportDirective",
        "scope": 199,
        "sourceUnit": 338,
        "src": "25:35:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/RequestHashStorage.sol",
        "file": "./RequestHashStorage.sol",
        "id": 127,
        "nodeType": "ImportDirective",
        "scope": 199,
        "sourceUnit": 124,
        "src": "61:34:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/bertrand/Desktop/requestNetwork-private/packages/smart-contracts/src/Bytes.sol",
        "file": "./Bytes.sol",
        "id": 128,
        "nodeType": "ImportDirective",
        "scope": 199,
        "sourceUnit": 28,
        "src": "96:21:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 129,
              "name": "StorageFeeCollector",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 337,
              "src": "410:19:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StorageFeeCollector_$337",
                "typeString": "contract StorageFeeCollector"
              }
            },
            "id": 130,
            "nodeType": "InheritanceSpecifier",
            "src": "410:19:3"
          }
        ],
        "contractDependencies": [
          337,
          1333
        ],
        "contractKind": "contract",
        "documentation": "@title RequestOpenHashSubmitter\n@notice Contract declares data hashes and collects the fees.\n@notice The hash is declared to the whole request network system through the RequestHashStorage contract.\n@notice Anyone can submit hashes.",
        "fullyImplemented": true,
        "id": 198,
        "linearizedBaseContracts": [
          198,
          337,
          1333
        ],
        "name": "RequestOpenHashSubmitter",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 132,
            "name": "requestHashStorage",
            "nodeType": "VariableDeclaration",
            "scope": 198,
            "src": "435:44:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_RequestHashStorage_$123",
              "typeString": "contract RequestHashStorage"
            },
            "typeName": {
              "contractScope": null,
              "id": 131,
              "name": "RequestHashStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 123,
              "src": "435:18:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                "typeString": "contract RequestHashStorage"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 148,
              "nodeType": "Block",
              "src": "767:78:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 142,
                      "name": "requestHashStorage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "773:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                        "typeString": "contract RequestHashStorage"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 144,
                          "name": "_addressRequestHashStorage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 134,
                          "src": "813:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 143,
                        "name": "RequestHashStorage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 123,
                        "src": "794:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_RequestHashStorage_$123_$",
                          "typeString": "type(contract RequestHashStorage)"
                        }
                      },
                      "id": 145,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "794:46:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                        "typeString": "contract RequestHashStorage"
                      }
                    },
                    "src": "773:67:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                      "typeString": "contract RequestHashStorage"
                    }
                  },
                  "id": 147,
                  "nodeType": "ExpressionStatement",
                  "src": "773:67:3"
                }
              ]
            },
            "documentation": "@param _addressRequestHashStorage contract address which manages the hashes declarations\n@param _addressBurner Burner address",
            "id": 149,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 139,
                    "name": "_addressBurner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 136,
                    "src": "738:14:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  }
                ],
                "id": 140,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 138,
                  "name": "StorageFeeCollector",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 337,
                  "src": "718:19:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_StorageFeeCollector_$337_$",
                    "typeString": "type(contract StorageFeeCollector)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "718:35:3"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134,
                  "name": "_addressRequestHashStorage",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "646:34:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 133,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "646:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 136,
                  "name": "_addressBurner",
                  "nodeType": "VariableDeclaration",
                  "scope": 149,
                  "src": "682:30:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 135,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "682:15:3",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "645:68:3"
            },
            "returnParameters": {
              "id": 141,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "767:0:3"
            },
            "scope": 198,
            "src": "634:211:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 156,
              "nodeType": "Block",
              "src": "938:41:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "6e6f742070617961626c652066616c6c6261636b",
                        "id": 153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "951:22:3",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_68d8ba3a651ec8e4ab98281ac8bd715a8adac0c57723f295f2da0444f5adb7f8",
                          "typeString": "literal_string \"not payable fallback\""
                        },
                        "value": "not payable fallback"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_68d8ba3a651ec8e4ab98281ac8bd715a8adac0c57723f295f2da0444f5adb7f8",
                          "typeString": "literal_string \"not payable fallback\""
                        }
                      ],
                      "id": 152,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1590,
                        1591
                      ],
                      "referencedDeclaration": 1591,
                      "src": "944:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "944:30:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 155,
                  "nodeType": "ExpressionStatement",
                  "src": "944:30:3"
                }
              ]
            },
            "documentation": null,
            "id": 157,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "908:2:3"
            },
            "returnParameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "938:0:3"
            },
            "scope": 198,
            "src": "900:79:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 196,
              "nodeType": "Block",
              "src": "1316:479:3",
              "statements": [
                {
                  "assignments": [
                    165
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 165,
                      "name": "contentSize",
                      "nodeType": "VariableDeclaration",
                      "scope": 196,
                      "src": "1378:19:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 164,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1378:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 173,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 169,
                            "name": "_feesParameters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 161,
                            "src": "1429:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 170,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1446:1:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 167,
                            "name": "Bytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "1408:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Bytes_$27_$",
                              "typeString": "type(library Bytes)"
                            }
                          },
                          "id": 168,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "extractBytes32",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 26,
                          "src": "1408:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory,uint256) pure returns (bytes32)"
                          }
                        },
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1408:40:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 166,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1400:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": "uint256"
                    },
                    "id": 172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1400:49:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1378:71:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 180,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 176,
                              "name": "contentSize",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "1505:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 175,
                            "name": "getFeesAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "1491:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view returns (uint256)"
                            }
                          },
                          "id": 177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1491:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 178,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1585,
                            "src": "1521:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 179,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1521:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1491:39:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "6d73672e76616c756520646f6573206e6f74206d61746368207468652066656573",
                        "id": 181,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1532:35:3",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_54a007a8536433c62f38304c137a8c36e4499f91e10eb2f37d21f4b195ebfc36",
                          "typeString": "literal_string \"msg.value does not match the fees\""
                        },
                        "value": "msg.value does not match the fees"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_54a007a8536433c62f38304c137a8c36e4499f91e10eb2f37d21f4b195ebfc36",
                          "typeString": "literal_string \"msg.value does not match the fees\""
                        }
                      ],
                      "id": 174,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1588,
                        1589
                      ],
                      "referencedDeclaration": 1589,
                      "src": "1483:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 182,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1483:85:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 183,
                  "nodeType": "ExpressionStatement",
                  "src": "1483:85:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 185,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1585,
                          "src": "1642:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 186,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1642:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 184,
                      "name": "collectForREQBurning",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 336,
                      "src": "1621:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1621:31:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 188,
                  "nodeType": "ExpressionStatement",
                  "src": "1621:31:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 192,
                        "name": "_hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 159,
                        "src": "1767:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 193,
                        "name": "_feesParameters",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 161,
                        "src": "1774:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 189,
                        "name": "requestHashStorage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 132,
                        "src": "1733:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RequestHashStorage_$123",
                          "typeString": "contract RequestHashStorage"
                        }
                      },
                      "id": 191,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "declareNewHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 122,
                      "src": "1733:33:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,bytes memory) external"
                      }
                    },
                    "id": 194,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1733:57:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 195,
                  "nodeType": "ExpressionStatement",
                  "src": "1733:57:3"
                }
              ]
            },
            "documentation": "@notice Submit a new hash to the blockchain.\n   * @param _hash Hash of the request to be stored\n@param _feesParameters fees parameters used to compute the fees. Here, it is the content size in an uint256",
            "id": 197,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "submitHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 159,
                  "name": "_hash",
                  "nodeType": "VariableDeclaration",
                  "scope": 197,
                  "src": "1234:21:3",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 158,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1234:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 161,
                  "name": "_feesParameters",
                  "nodeType": "VariableDeclaration",
                  "scope": 197,
                  "src": "1257:30:3",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1257:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1233:55:3"
            },
            "returnParameters": {
              "id": 163,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1316:0:3"
            },
            "scope": 198,
            "src": "1214:581:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 199,
        "src": "373:1424:3"
      }
    ],
    "src": "0:1798:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.12+commit.7709ece9.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.19",
  "updatedAt": "2019-12-04T06:27:46.620Z",
  "devdoc": {
    "methods": {
      "constructor": {
        "params": {
          "_addressBurner": "Burner address",
          "_addressRequestHashStorage": "contract address which manages the hashes declarations"
        }
      },
      "getFeesAmount(uint256)": {
        "params": {
          "_contentSize": "Size of the content of the block to be stored"
        },
        "return": "the expected amount of fees in wei"
      },
      "setFeeParameters(uint256,uint256,uint256)": {
        "details": "if the _rateFeesDenominator is 0, it will be treated as 1. (in other words, the computation of the fees will not use it)",
        "params": {
          "_minimumFee": "minimum fixed fee",
          "_rateFeesDenominator": "denominator rate",
          "_rateFeesNumerator": "numerator rate"
        }
      },
      "setRequestBurnerContract(address)": {
        "params": {
          "_requestBurnerContract": "address of the contract that will burn req token (probably through Kyber)"
        }
      },
      "submitHash(string,bytes)": {
        "params": {
          "_feesParameters": "fees parameters used to compute the fees. Here, it is the content size in an uint256",
          "_hash": "Hash of the request to be stored"
        }
      }
    },
    "title": "RequestOpenHashSubmitter"
  },
  "userdoc": {
    "methods": {
      "getFeesAmount(uint256)": {
        "notice": "Computes the fees."
      },
      "setFeeParameters(uint256,uint256,uint256)": {
        "notice": "Sets the fees rate and minimum fee."
      },
      "setRequestBurnerContract(address)": {
        "notice": "Set the request burner address."
      },
      "submitHash(string,bytes)": {
        "notice": "Submit a new hash to the blockchain."
      }
    },
    "notice": "Contract declares data hashes and collects the fees.The hash is declared to the whole request network system through the RequestHashStorage contract.Anyone can submit hashes."
  }
}