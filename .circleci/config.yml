version: 2.1

references:
  working_directory: &working_directory ~/repo
  node_image: &node_image
    image: cimg/node:22.14
    environment:
      NODE_OPTIONS: '--max-old-space-size=4096'
  ipfs_image: &ipfs_image
    image: requestnetwork/request-ipfs:v0.13.0
  ganache_image: &ganache_image
    image: trufflesuite/ganache:v7.6.0
    command:
      - '-l'
      - '90000000'
      - '-m'
      - 'candy maple cake sugar pudding cream honey rich smooth crumble sweet treat'
      - '-k'
      - 'london'
  graph_image: &graph_image
    image: graphprotocol/graph-node:v0.37.0
    # wait for ganache, then start
    command: sh -c 'wait_for localhost:8545 -t 30 -- start'
    environment:
      postgres_host: localhost
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'localhost:5001'
      ethereum: 'private:http://localhost:8545'
      GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: 1
  postgres_image: &postgres_image
    image: postgres
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
  step_graph_deploy: &step_graph_deploy
    name: 'Subgraph deployment and configuration'
    working_directory: ~/
    command: |
      git clone https://github.com/RequestNetwork/storage-subgraph
      cd storage-subgraph
      yarn
      yarn codegen  ./subgraph-private.yaml
      yarn create-local
      yarn deploy-local --version-label v0.0.1 ./subgraph-private.yaml
      sleep 5
  step_wait_for_node: &step_wait_for_node
    name: 'Waiting for Request Node to be ready'
    command: |
      for i in `seq 1 10`;
      do
        curl -s -o /dev/null -f http://localhost:3000/readyz > /dev/null && echo Success && exit 0
        echo -n .
        sleep 1
      done
      echo Failed waiting for Node initialization && exit 1
jobs:
  build:
    docker:
      - *node_image
    resource_class: xlarge
    working_directory: *working_directory
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn install
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Build all packages with lerna
          command: 'yarn build'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./
            - ./.nx-cache
            - packages/*/dist
            - packages/*/*.tsbuildinfo
  lint:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: Verify format
          command: yarn format:check
      - run:
          name: 'lint package.json files'
          command: 'yarn run packageJsonLint'
  test-unit:
    docker:
      - *node_image
    resource_class: large
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Test unit'
          command: |
            yarn test \
            --ignore @requestnetwork/request-node \
            --ignore @requestnetwork/ethereum-storage \
            --ignore @requestnetwork/request-client.js \
            --ignore @requestnetwork/smart-contracts \
            --ignore @requestnetwork/payment-detection \
            --ignore @requestnetwork/payment-processor \
            --ignore @requestnetwork/integration-test \
            --concurrency=2
      - store_test_results:
          path: packages/advance-logic/reports/
      - store_test_results:
          path: packages/currency/reports/
      - store_test_results:
          path: packages/data-access/reports/
      - store_test_results:
          path: packages/data-format/reports/
      - store_test_results:
          path: packages/epk-cipher/reports/
      - store_test_results:
          path: packages/epk-decryption/reports/
      - store_test_results:
          path: packages/lit-protocol-cipher/reports/
      - store_test_results:
          path: packages/multi-format/reports/
      - store_test_results:
          path: packages/request-logic/reports/
      - store_test_results:
          path: packages/thegraph-data-access/reports/
      - store_test_results:
          path: packages/transaction-manager/reports/
      - store_test_results:
          path: packages/utils/reports/
      - store_test_results:
          path: packages/web3-signature/reports/

  test-integration-with-smart-contracts:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
      - *postgres_image
      - *graph_image
    resource_class: xlarge
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Deploy test contract from smart-contracts'
          command: 'yarn deploy:contracts'
      - run: *step_graph_deploy
      - run:
          name: 'Test request-client.js, smart-contracts, payment-detection and payment-processor'
          command: |
            yarn test \
              --scope @requestnetwork/request-node \
              --scope @requestnetwork/ethereum-storage \
              --scope @requestnetwork/request-client.js \
              --scope @requestnetwork/smart-contracts \
              --scope @requestnetwork/payment-detection \
              --scope @requestnetwork/payment-processor \
              --concurrency=1
      - store_test_results:
          path: packages/request-node/reports/
      - store_test_results:
          path: packages/request-client.js/reports/
      - store_test_results:
          path: packages/smart-contracts/reports/
      - store_test_results:
          path: packages/payment-detection/reports/
      - store_test_results:
          path: packages/payment-processor/reports/
      - store_test_results:
          path: packages/ethereum-storage/reports/
  test-integration-with-request-node:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
      - *postgres_image
      - *graph_image
    resource_class: large
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Deploy test contract from smart-contracts'
          command: 'yarn deploy:contracts'
      - run: *step_graph_deploy
      - run:
          name: 'Start request-node'
          command: 'yarn start:request-node'
          background: true
      - run: *step_wait_for_node
      - run:
          name: 'Test integration-test'
          command: |
            yarn test \
              --scope @requestnetwork/integration-test
      - store_test_results:
          path: packages/integration-test/reports/
  test-usage-examples:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run build'
      - run:
          name: 'Execute usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run start'
  test-toolbox:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build toolbox'
          command: 'yarn workspace @requestnetwork/toolbox run build'

  test-nightly:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
      - *postgres_image
      - *graph_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Deploy test contract from smart-contracts'
          command: 'yarn deploy:contracts'
      - run: *step_graph_deploy
      - run:
          name: 'Start request-node'
          command: 'yarn start:request-node'
          background: true
      - run: *step_wait_for_node
      - run:
          name: 'Test integration-test (erc20)'
          command: 'yarn workspace @requestnetwork/integration-test run test:erc20'
      - run:
          name: 'Test integration-test (btc)'
          command: 'yarn workspace @requestnetwork/integration-test run test:btc'
      - store_test_results:
          path: packages/integration-test/reports/

  test-monthly:
    docker:
      - *node_image
    working_directory: *working_directory
    resource_class: large
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Test payment-processor (hinkal)'
          no_output_timeout: 30m
          command: 'yarn workspace @requestnetwork/payment-processor run test:hinkal'
      - store_test_results:
          path: packages/payment-processor/reports/

  # Release a next version package everytime we merge to master
  next-release:
    docker:
      - *node_image
    working_directory: *working_directory
    resource_class: large
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Allow github ssh host'
          command: mkdir ~/.ssh; echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      - run:
          name: 'Authenticate with registry'
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: 'Publish'
          command: yarn run publish-prerelease

workflows:
  ## Lerna will run lint, build and test
  build-and-test:
    jobs:
      - build
      - test-unit:
          requires:
            - build
      - test-integration-with-smart-contracts:
          requires:
            - build
      - test-integration-with-request-node:
          requires:
            - build
      - test-usage-examples:
          requires:
            - build
      - test-toolbox:
          requires:
            - build
      - lint:
          requires:
            - build

      # Release a next version package everytime we merge to master
      - next-release:
          requires:
            - lint
            - build
            - test-unit
            - test-integration-with-smart-contracts
            - test-integration-with-request-node
            - test-usage-examples
            - test-toolbox
          context: protocol-release
          filters:
            branches:
              only:
                - master

  nightly:
    triggers:
      - schedule:
          # This is a cron job for "everyday at 22 hours"
          cron: '0 22 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - test-nightly:
          requires:
            - build

  monthly:
    triggers:
      - schedule:
          # This is a cron job for "every 1st day of the month at 22 hours"
          cron: '0 22 1 * *'
          filters:
            branches:
              only:
                - master

    jobs:
      - build
      - test-monthly:
          requires:
            - build
