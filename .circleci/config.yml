version: 2.1

references:
  working_directory: &working_directory ~/repo
  attach_workspace: &attach_workspace
  image_name: &image_name 'circleci/python:3.7'
  node_image: &node_image
    image: circleci/node:14
  ipfs_image: &ipfs_image
    image: requestnetwork/request-ipfs
  ganache_image: &ganache_image
    image: trufflesuite/ganache-cli:v6.8.2
    command:
      - '-l'
      - '90000000'
      - '-m'
      - 'candy maple cake sugar pudding cream honey rich smooth crumble sweet treat'

jobs:
  build:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn install
          command:  yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Verify format
          command: yarn format:check
      - run:
          name: Verify lint
          command: yarn lint
      - run:
          name: Generate Smart Contract types
          command: yarn workspace @requestnetwork/smart-contracts run build
      - run:
          name: Generate Payment Detection queries
          command: yarn workspace @requestnetwork/payment-detection run codegen
     
      - persist_to_workspace:
          root: *working_directory
          paths: .
  lint-package-json:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'lint package.json files'
          command: 'yarn run packageJsonLint'
  test-request-client:
    docker:
      - *node_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build request-client.js'
          command: 'yarn workspace @requestnetwork/request-client.js run build:commonjs'
      - run:
          name: 'Deploy test contracts from smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Test request-client.js'
          command: 'yarn workspace @requestnetwork/request-client.js run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/request-client.js/coverage/
  test-data-access:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build data-access'
          command: 'yarn workspace @requestnetwork/data-access run build'
      - run:
          name: 'Test data-access'
          command: 'yarn workspace @requestnetwork/data-access run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/data-access/coverage/
  test-data-format:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build data-format'
          command: 'yarn workspace @requestnetwork/data-format run build'
      - run:
          name: 'Test data-format'
          command: 'yarn workspace @requestnetwork/data-format run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/data-format/coverage/
  test-transaction-manager:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build transaction-manager'
          command: 'yarn workspace @requestnetwork/transaction-manager run build'
      - run:
          name: 'Test transaction-manager'
          command: 'yarn workspace @requestnetwork/transaction-manager run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/transaction-manager/coverage/
  test-ethereum-storage:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run build'
      - run:
          name: 'Deploy contracs smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Test ethereum-storage'
          command: 'yarn workspace @requestnetwork/ethereum-storage run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/ethereum-storage/coverage/
  test-smart-contracts:
    docker:
      - *node_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run build:lib'
      - run:
          name: 'Deploy contracs smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Build smart contracts smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run build:sol'
      - run:
          name: 'Lint smart contracts smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run lint:sol'
      - run:
          name: 'Test smart contracts smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run test'
      - run:
          name: 'Test smart contracts utilities'
          command: 'yarn workspace @requestnetwork/smart-contracts run test:lib'
  test-request-logic:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build request-logic'
          command: 'yarn workspace @requestnetwork/request-logic run build'
      - run:
          name: 'Test request-logic'
          command: 'yarn workspace @requestnetwork/request-logic run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/request-logic/coverage/
  test-advanced-logic:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build advanced-logic'
          command: 'yarn workspace @requestnetwork/advanced-logic run build'
      - run:
          name: 'Test advanced-logic'
          command: 'yarn workspace @requestnetwork/advanced-logic run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/advanced-logic/coverage/
  test-request-node:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build request-node'
          command: 'yarn workspace @requestnetwork/request-node run build'
      - run:
          name: 'Deploy test contract from smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Test request-node'
          command: 'yarn workspace @requestnetwork/request-node run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/request-node/coverage/
  test-types:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build types'
          command: 'yarn workspace @requestnetwork/types run build'
  test-utils:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build utils'
          command: 'yarn workspace @requestnetwork/utils run build'
      - run:
          name: 'Test utils'
          command: 'yarn workspace @requestnetwork/utils run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/utils/coverage/
  test-currency:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build currency'
          command: 'yarn workspace @requestnetwork/currency run build'
      - run:
          name: 'Test currency'
          command: 'yarn workspace @requestnetwork/currency run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/currency/coverage/
  test-epk-signature:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build epk-signature'
          command: 'yarn workspace @requestnetwork/epk-signature run build'
      - run:
          name: 'Test epk-signature'
          command: 'yarn workspace @requestnetwork/epk-signature run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/epk-signature/coverage/
  test-epk-decryption:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build epk-decryption'
          command: 'yarn workspace @requestnetwork/epk-decryption run build'
      - run:
          name: 'Test epk-decryption'
          command: 'yarn workspace @requestnetwork/epk-decryption run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/epk-decryption/coverage/
  test-web3-signature:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build web3-signature'
          command: 'yarn workspace @requestnetwork/web3-signature run build'
      - run:
          name: 'Test web3-signature'
          command: 'yarn workspace @requestnetwork/web3-signature run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/web3-signature/coverage/
  test-integration-test:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run build'
      - run:
          name: 'Deploy test contract from smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Start request-node'
          command: 'yarn workspace @requestnetwork/request-node run start'
          background: true
      - run:
          name: 'Waiting for Request Node to be ready'
          command: |
            for i in `seq 1 10`;
            do
              curl -s -o /dev/null -f http://localhost:3000/readyz > /dev/null && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Node initialization && exit 1
      - run:
          name: 'Test integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run test'
  test-usage-examples:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run build'
      - run:
          name: 'Execute usage-examples'
          command: 'yarn workspace @requestnetwork/usage-examples run start'
  test-toolbox:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build toolbox'
          command: 'yarn workspace @requestnetwork/toolbox run build'
  test-multi-format:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build multi-format'
          command: 'yarn workspace @requestnetwork/multi-format run build'
      - run:
          name: 'Test multi-format'
          command: 'yarn workspace @requestnetwork/multi-format run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/multi-format/coverage/
  test-payment-detection:
    docker:
      - *node_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build payment-detection'
          command: 'yarn workspace @requestnetwork/payment-detection run build'
      - run:
          name: 'Deploy test contracts from smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Test payment-detection'
          command: 'yarn workspace @requestnetwork/payment-detection run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/payment-detection/coverage/
  test-payment-processor:
    docker:
      - *node_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build payment-processor'
          command: 'yarn workspace @requestnetwork/payment-processor run build'
      - run:
          name: 'Deploy test contracts from smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Test payment-processor'
          command: 'yarn workspace @requestnetwork/payment-processor run test'
      - persist_to_workspace:
          root: *working_directory
          paths:
            - packages/payment-processor/coverage/
  publish-coverage:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Publish Coverage'
          command: 'yarn publish-coverage'
  test-prototype-estimator:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build prototype-estimator'
          command: 'yarn workspace @requestnetwork/prototype-estimator run build'
  test-nightly:
    docker:
      - *node_image
      - *ipfs_image
      - *ganache_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Build integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run build'
      - run:
          name: 'Deploy test contract from smart-contracts'
          command: 'yarn workspace @requestnetwork/smart-contracts run deploy'
      - run:
          name: 'Start request-node'
          command: 'yarn workspace @requestnetwork/request-node run start'
          background: true
      - run:
          name: Waiting for Request Node to be ready
          command: |
            for i in `seq 1 10`;
            do
              curl -s -o /dev/null -f http://localhost:3000/readyz > /dev/null && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Node initialization && exit 1
      - run:
          name: 'Test integration-test'
          command: 'yarn workspace @requestnetwork/integration-test run test:scheduled'

  # Release a next version package everytime we merge to master
  next-release:
    docker:
      - *node_image
    working_directory: *working_directory
    steps:
      - attach_workspace:
          at: *working_directory
      - run:
          name: 'Allow github ssh host'
          command: mkdir ~/.ssh; echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
      # this build step shouldn't be necessary because publishing already builds, 
      #  but without it, some packages like epk-signature are missing the dist folder.
      - run:
          name: 'Build all'
          command: 'yarn clean && yarn build'
      - run:
          name: 'Authenticate with registry'
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: 'Publish'
          command: |
            FORCE_PUBLISH=$($(yarn bin)/lerna changed --json | jq '. | map(.name) | join (",")' -r)
            echo $FORCE_PUBLISH
            $(yarn bin)/lerna publish \
              --conventional-commits  \
              --conventional-prerelease \
              --exact \
              --canary \
              --no-git-tag-version \
              --no-push \
              --preid next \
              --no-verify-access \
              --dist-tag next \
              --yes \
              --force-publish=${FORCE_PUBLISH}

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - lint-package-json:
          requires:
            - build
      # Test
      - test-request-client:
          requires:
            - build
      - test-transaction-manager:
          requires:
            - build
      - test-data-access:
          requires:
            - build
      - test-data-format:
          requires:
            - build
      - test-ethereum-storage:
          requires:
            - build
      - test-smart-contracts:
          requires:
            - build
      - test-request-logic:
          requires:
            - build
      - test-multi-format:
          requires:
            - build
      - test-advanced-logic:
          requires:
            - build
      - test-request-node:
          requires:
            - build
      - test-types:
          requires:
            - build
      - test-utils:
          requires:
            - build
      - test-currency:
          requires:
            - build
      - test-epk-signature:
          requires:
            - build
      - test-epk-decryption:
          requires:
            - build
      - test-web3-signature:
          requires:
            - build
      - test-usage-examples:
          requires:
            - build
      - test-toolbox:
          requires:
            - build
      - test-integration-test:
          requires:
            - build
      - test-prototype-estimator:
          requires:
            - build
      - test-payment-detection:
          requires:
            - build
      - test-payment-processor:
          requires:
            - build

      # Publish the code coverage
      - publish-coverage:
          requires:
            - test-request-client
            - test-data-access
            - test-data-format
            - test-transaction-manager
            - test-ethereum-storage
            - test-request-logic
            - test-advanced-logic
            - test-epk-signature
            - test-web3-signature
            - test-epk-decryption
            - test-request-node
            - test-utils
            - test-currency
            - test-multi-format
            - test-payment-detection
            - test-payment-processor

      # Release a next version package everytime we merge to master
      - next-release:
          requires:
            - test-advanced-logic
            - test-data-access
            - test-data-format
            - test-epk-decryption
            - test-epk-signature
            - test-ethereum-storage
            - test-integration-test
            - test-smart-contracts
            - test-multi-format
            - test-request-client
            - test-request-logic
            - test-request-node
            - test-transaction-manager
            - test-types
            - test-utils
            - test-currency
            - test-web3-signature
            - test-payment-detection
            - test-payment-processor
          context: protocol-release
          filters:
            branches:
              only:
                - master

  nightly:
    triggers:
      - schedule:
          # This is a cron job for "everyday at 22 hours"
          cron: '0 22 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - lint-package-json:
          requires:
            - build
      - test-nightly:
          requires:
            - build
